name: CD

on:
  push:
    branches: [main]
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [main]

env:
  NODE_VERSION: "18"
  PNPM_VERSION: "8"

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.ref == 'refs/heads/main' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm prisma generate

      - name: Run database migrations
        run: pnpm prisma db push
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Build application
        run: pnpm build
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          RAZORPAY_KEY_SECRET: ${{ secrets.RAZORPAY_KEY_SECRET }}
   
          AWS_ENDPOINT_URL_S3: ${{ secrets.AWS_ENDPOINT_URL_S3 }}
          AUTH_GITHUB_CLIENT_ID: ${{ secrets.AUTH_GITHUB_CLIENT_ID }}
          AUTH_GITHUB_SECRET: ${{ secrets.AUTH_GITHUB_SECRET }}
          ARCJET_KEY: ${{ secrets.ARCJET_KEY }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}

      # Deploy to Vercel (if using Vercel)
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: "--prod"
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
          AWS_ENDPOINT_URL_S3: ${{ secrets.AWS_ENDPOINT_URL_S3 }}
          AUTH_GITHUB_CLIENT_ID: ${{ secrets.AUTH_GITHUB_CLIENT_ID }}
          AUTH_GITHUB_SECRET: ${{ secrets.AUTH_GITHUB_SECRET }}
          ARCJET_KEY: ${{ secrets.ARCJET_KEY }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}

      # Alternative: Deploy to Railway
      # - name: Deploy to Railway
      #   uses: railway/deploy@v1
      #   with:
      #     railway_token: ${{ secrets.RAILWAY_TOKEN }}
      #     service: ${{ secrets.RAILWAY_SERVICE }}

      # Alternative: Deploy to DigitalOcean App Platform
      # - name: Deploy to DigitalOcean App Platform
      #   uses: digitalocean/app_action@main
      #   with:
      #     app_name: vartex
      #     token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Notify deployment success
        if: success()
        run: |
          echo "üöÄ Deployment successful!"
          echo "Environment: Production"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          echo "Please check the logs for more details."
          exit 1

  post-deploy:
    runs-on: ubuntu-latest
    needs: deploy
    if: success()

    steps:
      - name: Health check
        run: |
          echo "Performing health check..."
          # Add your health check URL here
          # curl -f https://your-app-domain.com/api/health || exit 1

      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Add your smoke test commands here
          # npm run test:smoke

      - name: Notify team
        if: always()
        run: |
          echo "Post-deployment checks completed"
          # Add notification logic here (Slack, Discord, etc.)
