name: CD - Staging

on:
  push:
    branches: [develop, staging]
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [develop, staging]

env:
  NODE_VERSION: "18"
  PNPM_VERSION: "8"

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm prisma generate

      - name: Run database migrations
        run: pnpm prisma db push
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}

      - name: Build application
        run: pnpm build
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          STRIPE_SECRET_KEY: ${{ secrets.STAGING_STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STAGING_STRIPE_WEBHOOK_SECRET }}
          AWS_ENDPOINT_URL_S3: ${{ secrets.STAGING_AWS_ENDPOINT_URL_S3 }}
          AUTH_GITHUB_CLIENT_ID: ${{ secrets.STAGING_AUTH_GITHUB_CLIENT_ID }}
          AUTH_GITHUB_SECRET: ${{ secrets.STAGING_AUTH_GITHUB_SECRET }}
          ARCJET_KEY: ${{ secrets.STAGING_ARCJET_KEY }}
          RESEND_API_KEY: ${{ secrets.STAGING_RESEND_API_KEY }}

      # Deploy to Vercel (Staging)
      - name: Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: "--target staging"
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          STRIPE_SECRET_KEY: ${{ secrets.STAGING_STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STAGING_STRIPE_WEBHOOK_SECRET }}
          AWS_ENDPOINT_URL_S3: ${{ secrets.STAGING_AWS_ENDPOINT_URL_S3 }}
          AUTH_GITHUB_CLIENT_ID: ${{ secrets.STAGING_AUTH_GITHUB_CLIENT_ID }}
          AUTH_GITHUB_SECRET: ${{ secrets.STAGING_AUTH_GITHUB_SECRET }}
          ARCJET_KEY: ${{ secrets.STAGING_ARCJET_KEY }}
          RESEND_API_KEY: ${{ secrets.STAGING_RESEND_API_KEY }}

      - name: Notify staging deployment success
        if: success()
        run: |
          echo "üöÄ Staging deployment successful!"
          echo "Environment: Staging"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"

      - name: Notify staging deployment failure
        if: failure()
        run: |
          echo "‚ùå Staging deployment failed!"
          echo "Please check the logs for more details."
          exit 1

  staging-tests:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: success()

    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Run staging tests
        run: |
          echo "Running staging environment tests..."
          # Add your staging test commands here
          # curl -f https://your-staging-domain.com/api/health || exit 1

      - name: Notify staging tests completion
        if: always()
        run: |
          echo "Staging tests completed"
          # Add notification logic here
